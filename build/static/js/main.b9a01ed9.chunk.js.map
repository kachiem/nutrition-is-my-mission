{"version":3,"sources":["home/HomePage.js","settings/SettingsPage.js","App.js","registerServiceWorker.js","index.js"],"names":["Component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mode","e","console","log","setState","map","pair","path","text","react_default","a","createElement","className","key","Link","to","apply","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6SAGuBA,YCDIA,gBCiBrBC,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,KAAM,UAJQR,0EAUPS,GACTC,QAAQC,IAAI,UACZR,KAAKS,SAAS,CAACJ,KAA0B,UAAnBL,KAAKI,MAAMC,KAAkB,OAAO,4CAI3C,CACb,CAAC,IAAa,QACd,CAAC,YAAa,aACdK,IAAI,SAACC,GAAD,OA5BV,SAAkBC,EAAMC,GACtB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,IAAKN,GAC7BE,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMF,UAAU,WAAWG,GAAIR,GAAOC,KAyBjBQ,MAAM,KAAMV,KAEnC,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBAxBRvB,aAmDHC,GApBM2B,IAAM5B,UAoBZC,GC5DT4B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjC,QACf2B,UAAUC,cAAcQ,WAK1BjC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBiC,MAAM,SAAAC,GACLnC,QAAQmC,MAAM,4CAA6CA,KCzEjEC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAsB,OAAMH,GAAN,sBAEP1B,GAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,KAAK,SAAAC,GACjCA,EAAayB,aAAa1B,KAAK,WAC7BT,OAAOC,SAASmC,aAKpBhC,EAAgBC,KAGnBW,MAAM,WACLlC,QAAQC,IACN,mEArEAsD,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,KAAK,WACjC3B,QAAQC,IACN,+GAMJqB,EAAgBC,MCzCxBiC","file":"static/js/main.b9a01ed9.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\nclass HomePage extends Component{\n    render(){\n        return(\n            <h1>Home Page</h1>\n        )\n    }\n}\n\nexport default HomePage;","import React, {Component} from 'react';\n\nclass SettingsPage extends Component{\n    render(){\n        return (\n            <h1>Settings</h1>\n        )\n    }\n}\n\nexport default SettingsPage;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport $ from 'jquery';\n//import logo from './logo.svg';\nimport './App.css';\nimport './bootstrap.css';\n\nimport HomePage from './home/HomePage.js';\nimport SettingsPage from './settings/SettingsPage.js';\n\n\nfunction home_bar(path, text){\n  return (\n    <div className=\"nav-item\" key={path}>\n      <Link className=\"nav-link\" to={path}>{text}</Link>\n    </div>\n  )\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      mode: \"normal\",\n    }\n\n\n  }\n\n  toggleEdit(e){\n    console.log(\"goteem\")\n    this.setState({mode: (this.state.mode == \"normal\")?\"edit\":\"normal\"});\n  }\n\n  render() {\n    let navItems = [\n      [\"/\",         \"Home\"],\n      [\"/settings\", \"Settings\"],\n    ].map((pair)=>home_bar.apply(null, pair));\n\n    return (\n      <div className=\"App\">\n        <header className=\"home_bar\">\n        </header>\n      </div>\n    );\n  }\n} \n\nclass Square extends React.Component {\n  render() {\n    return (\n      <div>\n      <div>\n        <button className=\"square\">\n          {this.props.value}\n        </button>\n      </div>\n      <input type=\"file\" id=\"pic\" accept=\"image/*\" onclick=\"uploadOnChange()\"/>\n      <div id=\"filename\"></div>\n      <div>\n        //this.button = this.button.bind\n        <button className=\"btn btn-success\" onClick=\"sendMessage()\">Nut</button> \n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}